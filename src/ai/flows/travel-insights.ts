// This file is generated by Firebase Genkit.

'use server';

/**
 * @fileOverview AI-powered travel insights flow to provide users with potential health risks and optimal travel times based on their travel details.
 *
 * - travelInsights - A function that handles the travel insights process.
 * - TravelInsightsInput - The input type for the travelInsights function.
 * - TravelInsightsOutput - The return type for the travelInsights function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const TravelInsightsInputSchema = z.object({
  destinationA: z.string().describe('The starting district for travel.'),
  destinationB: z.string().describe('The destination district for travel.'),
  dateOfTravel: z.string().describe('The date of travel (YYYY-MM-DD).'),
  modeOfTravel: z.enum(['train', 'bus', 'car', 'air']).describe('The mode of travel.'),
  symptoms: z.string().describe('Any current symptoms the user is experiencing.'),
  userProfile: z.string().describe('Information about the user profile.'),
  localDiseaseData: z.string().describe('Local disease data for the travel period.'),
  travelDesignatedPlaceInfo: z.string().describe('Information about the travel designated place.'),
  environmentWeatherData: z.string().describe('Environment and weather data for the travel period.'),
});
export type TravelInsightsInput = z.infer<typeof TravelInsightsInputSchema>;

const TravelInsightsOutputSchema = z.object({
  healthRisks: z.string().describe('Potential health risks associated with the travel plan.'),
  optimalTravelTimes: z.string().describe('Optimal travel times based on the provided details.'),
  additionalRecommendations: z.string().describe('Any additional recommendations for a safe travel.'),
});
export type TravelInsightsOutput = z.infer<typeof TravelInsightsOutputSchema>;

export async function travelInsights(input: TravelInsightsInput): Promise<TravelInsightsOutput> {
  return travelInsightsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'travelInsightsPrompt',
  input: {schema: TravelInsightsInputSchema},
  output: {schema: TravelInsightsOutputSchema},
  prompt: `You are an AI travel assistant providing health risk insights and optimal travel times.

  Analyze the following travel details to provide potential health risks, suggest optimal travel times, and offer additional safety recommendations. Use reasoning to decide when or if to incorporate some piece of information in your output.

  Destination A: {{{destinationA}}}
  Destination B: {{{destinationB}}}
  Date of Travel: {{{dateOfTravel}}}
  Mode of Travel: {{{modeOfTravel}}}
  Symptoms: {{{symptoms}}}
  User Profile: {{{userProfile}}}
  Local Disease Data: {{{localDiseaseData}}}
  Travel Designated Place Info: {{{travelDesignatedPlaceInfo}}}
  Environment Weather Data: {{{environmentWeatherData}}}

  Provide insights on health risks, optimal travel times, and additional recommendations:
  - Health Risks:
  - Optimal Travel Times:
  - Additional Recommendations:
  `,
});

const travelInsightsFlow = ai.defineFlow(
  {
    name: 'travelInsightsFlow',
    inputSchema: TravelInsightsInputSchema,
    outputSchema: TravelInsightsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
